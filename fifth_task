#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define MAX_COMMAND_LENGTH 1024
#define MAX_ARGS 64
#define MAX_ARG_LENGTH 256

/* Parse the command line and split it into individual arguments */
int parse_command(char *command, char **args)
{
    int arg_count = 0;
    char *argument = strtok(command, " \t\n");
    while (argument != NULL && arg_count < MAX_ARGS - 1)
    {
        args[arg_count] = argument;
        ++arg_count;
        argument = strtok(NULL, " \t\n");
    }
    args[arg_count] = NULL;
    return arg_count;
}

/* Execute a command with the given arguments */
int execute_command(char **args)
{
    if (args[0] == NULL)
    {
        return 0;
    }
    if (strcmp(args[0], "env") == 0)
    {
        char **env = env;
        while (*env)
        {
            printf("%s\n", *env++);
        }
        return 0;
    }
    pid_t pid = fork();
    if (pid == 0)
    {
        /* Child process */
        execvp(args[0], args);
        fprintf(stderr, "Failed to execute command: %s\n", args[0]);
        exit(1);
    }
    else if (pid < 0)
    {
        /* Error forking process */
        fprintf(stderr, "Failed to fork process\n");
        return 1;
    }
    else
    {
        /* Parent process */
        int status;
        waitpid(pid, &status, 0);
        return status;
    }
}

int main()
{
    char command[MAX_COMMAND_LENGTH];
    char *args[MAX_ARGS];

    while (1)
    {
        /* Print shell prompt */
        printf("ReyJ$ ");

        /* Read command line */
        if (fgets(command, MAX_COMMAND_LENGTH, stdin) == NULL)
        {
            break;
        }

        /* Parse command line */
        int arg_count = parse_command(command, args);

        /* Execute command */
        int status = execute_command(args);

        /* Check status */
        if (status)
        {
            fprintf(stderr, "Command failed with status %d\n", status);
        }
    }

    return 0;
}

